use pill_engine::game::*;

pub struct Game { } 

impl PillGame for Game {
    fn start(&self, engine: &mut Engine) -> Result<()> {
        // Create scene
        let scene = engine.create_scene("Default").unwrap();
        engine.set_active_scene(scene).unwrap();
        let active_scene = engine.get_active_scene_handle().unwrap();

        // Register components
        engine.register_component::<TransformComponent>(scene).unwrap();
        engine.register_component::<MeshRenderingComponent>(scene).unwrap();
        engine.register_component::<CameraComponent>(scene).unwrap();
        engine.register_component::<AudioListenerComponent>(scene).unwrap();
        engine.register_component::<AudioSourceComponent>(scene).unwrap();
        
        // Add systems
        engine.add_system("Hello", hello_system).unwrap();

        // Create camera entity
        let camera = engine.create_entity(active_scene).unwrap();
        let transform_component = TransformComponent::builder()
            .position(Vector3f::new(0.0,5.0,7.0))
            .rotation(Vector3f::new(-20.0,-90.0,0.0))
            .build();
        engine.add_component_to_entity::<TransformComponent>(active_scene, camera, transform_component).unwrap();
        let camera_component = CameraComponent::builder().enabled(true).build();
        engine.add_component_to_entity::<CameraComponent>(active_scene, camera, camera_component).unwrap();

        Ok(())
    }
}

fn hello_system(engine: &mut Engine) -> Result<()> {
    let input_component = engine.get_global_component_mut::<InputComponent>()?;
    if input_component.get_key_pressed(Key::Space) {
        println!("Hello Pill");
    }

    Ok(())
}
